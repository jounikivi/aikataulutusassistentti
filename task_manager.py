import json
import os

# JSON-tiedoston nimi, johon teht√§v√§t tallennetaan
TASKS_FILE = "tasks.json"

def load_tasks():
    """
    Lataa teht√§v√§t JSON-tiedostosta.
    Jos tiedosto on tyhj√§ tai virheellinen, palauttaa tyhj√§n listan.
    """
    if os.path.exists(TASKS_FILE):
        try:
            with open(TASKS_FILE, "r", encoding="utf-8") as file:
                data = file.read().strip()
                if not data:
                    return []
                return json.loads(data)
        except (json.JSONDecodeError, ValueError):
            print("‚ö†Ô∏è Virhe `tasks.json` -tiedoston lukemisessa. Luodaan uusi tiedosto.")
            return []
    return []

def save_tasks(tasks):
    """
    Tallentaa teht√§v√§t JSON-tiedostoon.
    """
    with open(TASKS_FILE, "w", encoding="utf-8") as file:
        json.dump(tasks, file, indent=4, ensure_ascii=False)

def add_task():
    """
    Pyyt√§√§ k√§ytt√§j√§lt√§ teht√§v√§n tiedot ja tallentaa ne JSON-tiedostoon.
    """
    print("\nüìå Lis√§√§ uusi teht√§v√§\n")

    # K√§ytt√§j√§n sy√∂tteet
    title = input("Teht√§v√§n otsikko: ")
    deadline = input("Deadline (YYYY-MM-DD HH:MM): ").strip()

    # Jos k√§ytt√§j√§ ei sy√∂t√§ kellonaikaa, lis√§t√§√§n oletus (klo 12:00)
    if len(deadline) == 10:
        deadline += " 12:00"

    # Tarkistetaan, ett√§ t√§rkeys on v√§lill√§ 1‚Äì5
    while True:
        try:
            priority = int(input("T√§rkeysaste (1-5, jossa 5 on korkein): "))
            if 1 <= priority <= 5:
                break
            else:
                print("‚ö†Ô∏è Anna numero v√§lilt√§ 1‚Äì5.")
        except ValueError:
            print("‚ö†Ô∏è Sy√∂t√§ numero v√§lilt√§ 1‚Äì5.")

    # Tarkistetaan, ett√§ kesto on kokonaisluku
    while True:
        try:
            duration = int(input("Arvioitu kesto (minuutteina): "))
            break
        except ValueError:
            print("‚ö†Ô∏è Sy√∂t√§ numero.")

    # Luodaan teht√§v√§ sanakirjana
    task = {
        "title": title,
        "deadline": deadline,
        "priority": priority,
        "duration": duration,
        "status": "pending"  # Oletuksena teht√§v√§ on kesken
    }

    # Ladataan olemassa olevat teht√§v√§t
    tasks = load_tasks()
    tasks.append(task)  # Lis√§t√§√§n uusi teht√§v√§ listaan

    # Tallennetaan p√§ivitetty teht√§v√§lista
    save_tasks(tasks)

    print(f"\n‚úÖ Teht√§v√§ lis√§tty: {title} (T√§rkeys: {priority}, Deadline: {deadline})")

def list_tasks():
    """
    Tulostaa kaikki tallennetut teht√§v√§t komentoriville.
    """
    tasks = load_tasks()
    if not tasks:
        print("\nüì≠ Ei tallennettuja teht√§vi√§.")
        return
    
    print("\nüìã Tallennetut teht√§v√§t:\n")
    for index, task in enumerate(tasks, start=1):
        print(f"{index}. {task['title']} (Deadline: {task['deadline']}, T√§rkeys: {task['priority']}, Kesto: {task['duration']} min, Tila: {task['status']})")

def delete_task():
    """
    Poistaa k√§ytt√§j√§n valitseman teht√§v√§n.
    """
    tasks = load_tasks()
    if not tasks:
        print("\nüì≠ Ei teht√§vi√§ poistettavaksi.")
        return

    list_tasks()
    try:
        task_num = int(input("\nValitse poistettava teht√§v√§n numero: ")) - 1
        if 0 <= task_num < len(tasks):
            removed_task = tasks.pop(task_num)
            save_tasks(tasks)
            print(f"\nüóëÔ∏è Teht√§v√§ poistettu: {removed_task['title']}")
        else:
            print("‚ö†Ô∏è Virheellinen valinta.")
    except ValueError:
        print("‚ö†Ô∏è Anna kelvollinen numero.")

def main():
    """
    P√§√§valikko, josta k√§ytt√§j√§ voi valita toiminnon.
    """
    while True:
        print("\nüìå TEHT√ÑV√ÑHALLINTA")
        print("1Ô∏è‚É£ Lis√§√§ uusi teht√§v√§")
        print("2Ô∏è‚É£ N√§yt√§ kaikki teht√§v√§t")
        print("3Ô∏è‚É£ Poista teht√§v√§")
        print("4Ô∏è‚É£ Poistu")
        
        choice = input("\nValitse toiminto (1-4): ")

        if choice == "1":
            add_task()
        elif choice == "2":
            list_tasks()
        elif choice == "3":
            delete_task()
        elif choice == "4":
            print("\nüëã Ohjelma suljetaan. Kiitos!")
            break
        else:
            print("\n‚ö†Ô∏è Virheellinen valinta, yrit√§ uudelleen.")

if __name__ == "__main__":
    main()

    
# Komentorivi: python task_manager.py
