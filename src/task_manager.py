import json
import os
from smart_scheduler import suggest_schedule

TASKS_FILE = "tasks.json"

def load_tasks():
    """Lataa teht√§v√§t tiedostosta ja lis√§√§ puuttuva status-kentt√§."""
    if os.path.exists(TASKS_FILE):
        try:
            with open(TASKS_FILE, "r", encoding="utf-8") as file:
                tasks = json.load(file)
                for task in tasks:
                    if "status" not in task:
                        task["status"] = "pending"
                return tasks
        except json.JSONDecodeError:
            return []
    return []

def save_tasks(tasks):
    """Tallentaa teht√§v√§t tiedostoon."""
    with open(TASKS_FILE, "w", encoding="utf-8") as file:
        json.dump(tasks, file, indent=4, ensure_ascii=False)

def add_task():
    """Lis√§√§ uusi teht√§v√§ ja k√§ytt√§√§ teko√§ly√§ suosittelemaan ajankohtaa."""
    title = input("Teht√§v√§n otsikko: ")
    
    # AI ehdottaa ajankohtaa
    ai_suggestion = suggest_schedule()
    print(f"Teko√§lyn suositus ajankohdaksi: {ai_suggestion}")
    
    # K√§ytt√§j√§ voi joko hyv√§ksy√§ suosituksen tai sy√∂tt√§√§ oman ajan
    deadline = input(f"Deadline (YYYY-MM-DD HH:MM) [Paina Enter hyv√§ksy√§ksesi AI-suosituksen]: ")
    if deadline.strip() == "":
        deadline = f"2025-02-28 {ai_suggestion.split(':')[1]}:00"  # K√§ytt√§√§ AI:n suositusta

    priority = input("T√§rkeysaste (1-5): ")

    task = {
        "title": title,
        "deadline": deadline,
        "priority": priority,
        "status": "pending"
    }

    tasks = load_tasks()
    tasks.append(task)
    save_tasks(tasks)

    print(f"‚úÖ Teht√§v√§ lis√§tty: {title} klo {deadline}")

def list_tasks():
    """Tulostaa kaikki tallennetut teht√§v√§t komentoriville."""
    tasks = load_tasks()
    if not tasks:
        print("\nüì≠ Ei tallennettuja teht√§vi√§.")
        return
    
    print("\nüìã Tallennetut teht√§v√§t:\n")
    for index, task in enumerate(tasks, start=1):
        print(f"{index}. {task['title']} (Deadline: {task['deadline']}, T√§rkeys: {task['priority']}, Tila: {task['status']})")

def delete_task():
    """Poistaa k√§ytt√§j√§n valitseman teht√§v√§n."""
    tasks = load_tasks()
    if not tasks:
        print("\nüì≠ Ei teht√§vi√§ poistettavaksi.")
        return

    list_tasks()
    try:
        task_num = int(input("\nValitse poistettava teht√§v√§n numero: ")) - 1
        if 0 <= task_num < len(tasks):
            removed_task = tasks.pop(task_num)
            save_tasks(tasks)
            print(f"\nüóëÔ∏è Teht√§v√§ poistettu: {removed_task['title']}")
        else:
            print("‚ö†Ô∏è Virheellinen valinta.")
    except ValueError:
        print("‚ö†Ô∏è Anna kelvollinen numero.")

def main():
    """Ohjelman p√§√§valikko."""
    while True:
        print("\nüìå TEHT√ÑV√ÑHALLINTA")
        print("1Ô∏è‚É£ Lis√§√§ uusi teht√§v√§")
        print("2Ô∏è‚É£ N√§yt√§ kaikki teht√§v√§t")
        print("3Ô∏è‚É£ Poista teht√§v√§")
        print("4Ô∏è‚É£ Poistu")

        choice = input("\nValitse toiminto (1-4): ")

        if choice == "1":
            add_task()
        elif choice == "2":
            list_tasks()
        elif choice == "3":
            delete_task()
        elif choice == "4":
            print("\nüëã Ohjelma suljetaan. Kiitos!")
            break
        else:
            print("\n‚ö†Ô∏è Virheellinen valinta, yrit√§ uudelleen.")

if __name__ == "__main__":
    main()
